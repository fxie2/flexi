#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
import math
import shutil
import tempfile
import time
# Try to import gnuplot for line plot output. If not on the system, set a flag to supress this output
# You will need the python-gnuplot package for this
noGnuplot = False
try:
    import Gnuplot
except ImportError:
    noGnuplot = True

# set parameters
procs = 1  # number of MPI procs to be used
N     = 3  # polynomial degree to be tested

from modify_prm import modify_prm, read_prm
from analyze_functions import get_last_L2_error, get_last_Linf_error
from execute_flexi import execute_flexi

tflexi = "./flexi_" + str(int(time.time()))
if len(sys.argv) == 2 :
   flexi_path = "../../build/bin/flexi"
   if not os.path.exists(flexi_path) :
      print "path to flexi-executable '%s' is wrong, please modify script" % \
            flexi_path
      print "or use './convergence.py [path to flexi-executable] prm-file'"
      sys.exit(1)
   prm_path = sys.argv[1]
elif len(sys.argv) == 3 :
   flexi_path = sys.argv[1]
   prm_path = sys.argv[2]
else :
   print 'usage: ./convergence.py [path to flexi-executable] prm-file'
   sys.exit(1)

if not os.path.exists(prm_path) :
   print "parameter-file '%s' not found" % prm_path 
   sys.exit(1)

shutil.copy(flexi_path, tflexi)
time.sleep(1.0)
flexi_path = tflexi

x_array = [1.,2.,4.,8.]
grids = ['CART_HEX_PERIODIC_001_mesh.h5', \
         'CART_HEX_PERIODIC_002_mesh.h5', \
         'CART_HEX_PERIODIC_004_mesh.h5', \
         'CART_HEX_PERIODIC_008_mesh.h5']

# modify polynomial degree N
modify_prm(prm_path, {'N' : N})

# get theoretical order of convergence
EOC = int(read_prm(prm_path,'N'))+1

# get ProjectName
projectname = str(read_prm(prm_path,'ProjectName'))
# create filename for Gnuplot
filename = projectname+'_convtest_grid.pdf'
shutil.copy(prm_path,filename)

# open file to print order of convergence
convfile = projectname+'_convfile_grid.csv'
shutil.copy(prm_path,convfile)
f = open(convfile,'w')

tprm = tempfile.NamedTemporaryFile()
shutil.copy(prm_path, tprm.name)

for line in open(tprm.name, 'r').readlines() :
   print line,

L2_array   = [[] for i in range(len(grids))]
i=0
for grid in grids :
   i = i + 1

   # modify nElems of Grid in X and Y direction
   modify_prm(prm_path, {'MeshFile' : grid})
   # save last L2, Linf error for EOC computation
   if i > 1 :
      last_L2 = L2
      last_Linf = Linf

   start_time = time.time()
   # execute flexi and get L2, L_inf error
   L2, Linf = execute_flexi(flexi_path, prm_path, projectname, \
         [get_last_L2_error, get_last_Linf_error], mpi_procs = procs)
   end_time = time.time()

   # output header of output-table
   if i == 1:
      sys.stdout.write("═══════╦")
      for j in range(len(L2))  :
         sys.stdout.write("═══════════════════════════════════════════╦")
      sys.stdout.write('\n')
      print "grid   ║",
      f.write("grid")
      for j in range(len(L2))  :
         sys.stdout.write(" L2 err      EOC     | Linf err    EOC     ║")
         f.write(",L2 err,EOC,Linf err,EOC")
      f.write("\n")
      sys.stdout.write('\n')
      sys.stdout.write("═══════╬")
      for j in range(len(L2))  :
         sys.stdout.write("═══════════════════════════════════════════╬")
      sys.stdout.write('\n')
   print " %s   ║" % grid[-11:-8],
   f.write(grid[-11:-8])

   #output L2, Linf errors and EOC
   for j in range(len(L2))  :
      if i == 1 :
        conv_l2 = -99.
        conv_linf = -99.
      else :
        try :
          conv_l2 = math.log(last_L2[j]/L2[j]) / math.log(2)
          conv_linf = math.log(last_Linf[j]/Linf[j]) / math.log(2)
        except :
          conv_l2 = -99.
          conv_linf = -99.
      print "%8.4e %8.4f | %8.4e %8.4f ║" % (L2[j], conv_l2,\
            Linf[j],  conv_linf),
      f.write(",%8.4e,%8.4f, %8.4e, %8.4f " % (L2[j], conv_l2,\
            Linf[j],  conv_linf))
   L2_array[i-1] = L2[1]
   print end_time - start_time
   f.write("\n")
   sys.stdout.flush()

# produce convergence plot with Gnuplot
if noGnuplot != True:
   g = Gnuplot.Gnuplot()
   g.title('ConvTest X-Momentum')
   g.xlabel('Number of Elements')
   g.ylabel('L2 Error')
   g('set logscale xy')
   g('set terminal pdf')
   g('set output "'+filename+'"')
   gnuplot_data = Gnuplot.Data(x_array,L2_array,with_="line")
   EOC_str = str(EOC)
   g('exact(x)=(1./x)**"'+EOC_str+'"')
   g.plot(gnuplot_data,'exact(x)')

f.close()
os.remove(flexi_path)         
